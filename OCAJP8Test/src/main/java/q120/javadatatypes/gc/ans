A call to n.makeThisNull() marks the private instance of M for garbage collection.
..
n.makeThisNull() internally calls makeItNull(m), which sets is method parameter pM to null. 
However, remember that, in Java, every call is pass by value.
Therefore, when makeItNull(m) is called, the value of m is passed to the method and not m itself. 
The method parameter pM is therefore is not same as m but a new variable that points to the same object
as the one pointed to by m. It is that variable pM which is set to null. 
The original m still keeps pointing to the same object as it was. 
Therefore, the instance of M will not be marked for garbage collection.

Setting pM = null; in makeItNull(), marks the private instance of M for garbage collection.
..
pM is just a method parameter (a copy of the original reference) that is passed to makeItNull(). 
So setting it to null will not affect the original variable.

private members of a class become eligible for garbage collection only when the instance of the 
class itself becomes eligible for garbage collection.
..
This is not true. Any instance can be made eligible by setting all its references to null. 
For example, in the following code, the Object instance referred to by 'o', 
can be made eligible for garbage collection by calling setNull(), 
even if the instance of X itself is not eligible for garbage collection.  

class X{   
Object o = new Object();   
public void setNull(){ o = null; } 
}  

On the other hand, if the container object becomes eligible for GC and if there are no references 
to the contained objects outside of the container, the contained objects also become eligible for GC. 
For example, in the following code, both  - the instance of X and the object instance contained inside X, 
will become eligible for garbage collection:  

... 
X x = new X(); 
x = null; 
...