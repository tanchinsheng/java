Given:

StringBuilder sb = new StringBuilder("asdf");

Which of the following code fragments will print true?

String str1 = sb.toString();
String str2 = sb.toString();
System.out.println(str1 == str2);
//StringBuilder's toString() will always return a new String object.
So == will always return false in this case.

String str1 = sb.toString();
String str2 = str1;
System.out.println(str1 == str2);
//Since str1 and str2 both point to the same String object, == will return true.

String str1 = sb.toString();
System.out.println(str1 == sb);
//Remember that == operator can only compare two references of same or similar kind.
That means, there should be at least an ancestor-child
 between the two classes.
If the two classes of objects that are being compared have no
such relation to each other, == operation will not compile
because the compiler knows that the two references can never
point to the same object.

Here, a reference of class String can never be point to an object of
class StringBuilder. Thus, it will not compile.

System.out.println(sb == new StringBuilder(sb));
/Since the two sides of == point to two different instances of StringBuilder,
this will always print false.

