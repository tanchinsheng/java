LocalDate ld2 = ld.plus(Period.ofMonths(1).ofDays(1));
//ofXXX are static methods of Period class. Therefore, Period.ofMonths(1).ofDays(1) will give you a Period of only 1 day.
The previous call to ofMonths(1) does return an instance of Period comprising 1 month but that instance is irrelevant
because ofDays is a static method.

LocalDate ld2 = ld.plus(new Period(0, 1, 1));
//None of the new date related classes have public constructors. So using new to create their instances would be invalid.

LocalDate ld2 = ld.plus(new Period(31)).plus(new Period(1));
//None of the new date related class have public constructors. So using new to create their instances would be invalid.
Further, a month is not necessarily equal to 31 days. The number of days added to a given month depends on the month
to which you are adding a month. For example, if you add 1 month to 1st January, you will get 1 February i.e. 31 days are added.
But if you add 1 month to 1st February, you will still get 1 March i.e. only 28 days are added, (or if it is a leap year, 29 days).

LocalDate ld2 = ld.plus(Period.of(0, 1, 1));//true
public static Period of(int years, int months, int days) Obtains a Period representing a number of years, months and days.
This creates an instance based on years, months and days.
