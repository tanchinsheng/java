Which of the given statements are correct for a method that overrides the following method: 

public Set getSet(int a) {...}

Its return type must be declared as Set.//Wrong
Return type may also be a subclass/subinterface. 
So it can also return SortedSet, TreeSet, HashSet, or any other class that implements or subclasses a Set

It may return HashSet. (Assume that HashSet implements Set)//Correct

It can declare any Exception in throws clause//False
Since the original (overridden) method does not have any throws clause, the overriding method cannot declare any checked exceptions.

It can declare any RuntimeException in throws clause.//False
A method can throw any RuntimeException (such as a NullPointerException) even without declaring it in its throws clause.

It can be abstract.//Correct
Yes, you can make it abstract!! You would have to make the class as abstract as well though.

Explanation
To override a method in the subclass, the overriding method (i.e. the one in the subclass) MUST HAVE: 
.same name 
.same return type in case of primitives (a subclass is allowed for classes, this is also known as covariant return types). 
.same type and order of parameters 
.it may throw only those exceptions that are declared in the throws clause of the superclass's method or 
exceptions that are subclasses of the declared exceptions. It may also choose NOT to throw any exception. 
The names of the parameter types do not matter. For example, void methodX(int i) is same as void methodX(int k)