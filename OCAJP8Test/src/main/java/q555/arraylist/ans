Which of the following are benefits of ArrayList over an array?

You do not have to worry about the size of the ArrayList while appending elements.//true
//An ArrayList resized dynamically at run time as per the situation.
An array cannot be resized once created. This reduces the amount of boiler plate code that is
required to do the same task using an array.

It consumes less memory space.
//This is an ambiguous option because in certain situation an ArrayList may consume a little bit more memory than an array
(because of additional internal data structure and pointers),
while in some other situation it may consume less (when your array is only half full).

You do not have to worry about thread safety.
//An ArrayList, just like an array is not thread safe. If you have multiple threads trying to
add and remove elements from an ArrayList, you have to write additional code to ensure thread safety.

It allows you to write type safe code.
//Since ArrayList is a generics enabled class, it helps you write type safe code. For example, if you have:   

    ArrayList<String> al = new ArrayList<>();
    al.add(new Integer(10)); will not compile because the compiler knows that al can only contain Strings.

However, this is not an advantage over an array because arrays are also type safe.
For example, if you have: String[] sa = new String[10];
you cannot do sa[0] = new Integer(10); either.

But you can do
Object[] oa = sa; and
oa[0]  = new Integer(10); 
This will compile fine but will fail at runtime.
This is a hole in the type safety provided by arrays.

Explanation
Some candidates have reported getting a similar question with ambiguous options such as
"An ArrayList implements Collection API". It is anybody's guess as to what is the correct answer.