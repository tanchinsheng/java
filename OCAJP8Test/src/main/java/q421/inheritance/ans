Which of these statements about interfaces are true?

Interfaces are always abstract. //true

An interface can have static methods. //true
//Java 8 allows interfaces to have static methods as well as default methods. 

All methods in an interface are abstract although you need not declare them to be so.
//An interface may have default methods. A method marked default is considered a non-abstract instance method. 
A non-abstract class that implements this interface doesn't necessarily have to implement a default method. 

Fields of an interface may be declared as transient or volatile but not synchronized.
//All fields of an interface are public, static, and final. 
Therefore, volatile, transient, and synchronized do not make sense for such fields.

Interfaces cannot be final. //true

In Java 8, interfaces allow multiple implementation inheritance through default methods.
//They don't. You cannot have a class that implements two interfaces where both the interfaces contain a 
default method with the same signature unless the class provides an implementation for that method itself. 
For example, in the following code, class C will not compile: 
interface I1{   
    public default void m1(){      
        System.out.println("in I1.m1");   
    } 
} 

interface I2{   
    public default void m1(){      
        System.out.println("in I2.m1");   
    } 
}  

class CI implements I1, I2{ //This class will not compile. 
} 

class C2 implements I1, I2{ //This class will compile because it provides its own implementation of m1.   
    public void m1(){      
        System.out.println("in C2.m1");   
    } 
}  

You can have a class inherit a method with the same signature from an interface and a superclass though. 
This is allowed because the superclass's version always overrides the interface's version. 
The class doesn't get two implementations. It gets only the version from super class.