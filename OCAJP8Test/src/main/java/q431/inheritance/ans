It is not possible to define CleanConnector that does not throw IOException at instantiation.
//It is possible. You can also throw a superclass of IOException from the CleanConnector's constructor. 
For example, the following is valid:  
class CleanConnector extends PortConnector {    
    public CleanConnector(int port) throws Exception {          
        super(port);    
    } 
}

PortConnector class itself is not valid because you cannot throw any exception from a constructor.
//A constructor is free to throw any exception.

CleanConnector's constructor cannot throw any exception other than IOException.
//It can throw any exception but it must also throw IOException (or its super class). So the following is valid:  
class CleanConnector extends PortConnector {    
    public CleanConnector(int port) throws IOException, FileNotFoundException, SomeOtherCheckedException {          
        super(port);    
    } 
}

CleanConnector's constructor cannot throw any exception other than subclass of IOException.
//As described above, it can throw any exception but it must throw IOException (or its superclass) as well.

CleanConnector's constructor cannot throw any exception other than superclass of IOException.
//As described above, it can throw any exception but it must throw IOException (or its superclass) as well.

None of these.//true
Observe that the rule for overriding a method is opposite to the rule for constructors. 
An overriding method cannot throw a superclass exception, while a constructor of a subclass cannot throw subclass exception 
(Assuming that the same exception or its super class is not present in the subclass constructor's throws clause). 
For example:    

class A{     
    public A() throws IOException{ }       
    void m() throws IOException{ }   
}    

class B extends A{     
    //IOException is valid here, but FileNotFoundException is invalid     
    public B() throws IOException{ }      

    //FileNotFoundException is valid here, but Exception is invalid     
    void m() throws FileNotFoundException{ } } 

(Note: FileNotFoundException is a subclass of IOException, which is a subclass of Exception) 
If the subclass constructor's throws clause includes the same exception or its superclass, 
then it can throw any other exception as well.

Explanation
As PortConnector has only one constructor, there is only one way to instantiate it. 
Now, to instantiate any subclass of PortConnector, the subclass's constructor should call super(int). 
But that throws throws IOException. And so this exception (or its super class) must be defined in the 
throws clause of subclass's constructor. Note that you cannot do something like:  

public CleanConnector(){    
    try{ super(); }catch(Exception e){} //WRONG : call to super must be first statement in constructor 
}  

Remember: Constructor must declare all the checked exceptions declared in the base constructor 
(or the super classes of the checked exceptions). They may add other exceptions as well. 
This behavior is exactly opposite from that of methods. The overriding method cannot throw any exception 
other than what the overridden method throws. It may throw subclasses of those exceptions.

