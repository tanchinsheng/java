It will not compile. //true
b points to an object of class Bat, which does not extend from Bird.
Now, it is possible for b to point to an object of any subclass of Bat.
However, it is not possible for that sub class to extend Bird
(because a class can at most extend from only one class).
Therefore, it is not possible for b to point to an object of a class that "is a" Bird.
The compiler figures out this fact at compile time itself and so the code fails to compile.

It will throw an exception when run.

f is a Flyer
e is a Bird
//At run time, f points to an object of class Eagle.
Now, Eagle extends Bird, which implements Flyer so f instanceof Flyer returns true.
e points to an object of class Eagle. Eagle extends Bird. Therefore, e instanceof Bird will also return true.

f is a Flyer

e is a Bird

Explanation
Note that there is no compilation issue with b instanceof Flyer because Flyer is an interface and
it is possible for b to point to an object of a class that is a sub class of Bat and also implements Flyer.
So the compiler doesn't complain. If you make Bat class as final, b instanceof Flyer will not compile
because the compiler knows that it is not possible for b to point to an object of a class that implements Flyer.
