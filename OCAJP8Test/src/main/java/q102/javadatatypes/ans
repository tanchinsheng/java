What will be the result of attempting to compile and run the following program?

The program will print java.lang.String@XXX,
where XXX is the memory location of the object a.

The program will print A

The program will print B

The program will not compile because the type of a, b, and c  is Object.
//String is an Object as well.
You can always assign an object of the subclass to a super class reference
without a cast.

The program will print java.lang.String@XXX,
where XXX is the hash code of the object a.

Explanation
The variables a, b and c contain references to actual objects.
Assigning to a reference only changes the reference value,
and not the object pointed to by the reference.
So, when c = a is executed c starts pointing to the string object containing A.
and when a = b is executed, a starts pointing to the string object
containing B but the object containing A still remains same and c
still points to it. So the program prints A and not B.

The Object class's toString generates a string using:  
getClass().getName() + '@' + Integer.toHexString(hashCode())
But in this case, String class overrides the toString() method that
returns just the actual string value.

