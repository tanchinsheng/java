Assuming that the following method will always be called with a phone number in the format ddd-ddd-dddd
(where d stands for a digit), what can be inserted at //1 so that it will return a String containing "xxx-xxx-"+dddd,
where dddd represents the same four digits in the original number?

public static String hidePhone(String fullPhoneNumber){   
    //1 Insert code here
}

Please select 2 options

String mask = "xxx-xxx-";
mask.append(fullPhoneNumber.substring(8));
return mask;
//Remember that String class doesn't have append (and insert) method because a String cannot be mutated.

return new StringBuilder("xxx-xxx-")+fullPhoneNumber.substring(8);

return new StringBuilder(fullPhoneNumber).replace(0, 7, "xxx-xxx-").toString();
//For all of the methods in String and StringBuilder that take two int parameters for specifying a range,
remember that the first index is included but the last index is not.
For example, as in this case, the arguments given are 0 and 7,
which means it will include the characters with index 0 to 6, that is, a total of 7 characters 0, 1, 2, 3, 4, 5, and 6.
Therefore, this will actually produce "xxx-xxx--dddd".
The same pattern is used for almost all other methods in standard java library classes.
The first index is included but the last one is not.

return "xxx-xxx-"+fullPhoneNumber.substring(8, 12);
//This is another example where the pattern discussed above is used. The character at first index i.e. 8
is included but the last index 12 is not. In fact there is no element at the 12th index in the given string.
So the characters returns by the substring will be the ones at index 8, 9, 10, and 11 of the original fullPhoneNumber.
