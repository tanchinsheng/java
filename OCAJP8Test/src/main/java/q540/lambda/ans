 Which of the following options can be inserted above so that it will print 1 4 9?

Please select 3 options

processList(al, a, b->System.out.println(a*b));
//Observe that without the brackets over a, b, it would imply that you are trying to pass 3 arguments to processList
method - a, b, and b->System.out.println(a*b), which is incorrect.
You actually want to pass only two arguments - a and the lambda expression.
Therefore, whenever the method of a functional interface takes more than one parameter,
you need to put the arguments within brackets.

If the method of a functional interface takes one parameter, you can omit the brackets.
For example, x -> expression and (x) -> expression are equivalent.

If the method of a functional interface takes no parameter, you must write empty brackets. For example, ( ) -> expression

processList(al, (int a, int b)->System.out.println(a*b) );//true

processList(al, (int a, int b)->System.out.println(a*b); );
//When your method body comprises only a single expression, you must omit the semi-colon.

processList(al, (a, b)->System.out.println(a*b)); //true
//It is ok to omit the parameter types in case of a functional interface because the compiler can determine
the type of the parameters by looking at the interface method.

processList(al, (a, b) ->{  System.out.println(a*b); } ); //true
//If you enclose your method body within curly braces, you must write complete lines of code including the semi-colon.
FYI, if the method is supposed to return a value, then you must include a return statement
just like you do in a regular method if you are using the curly braces syntax.

Explanation
There is a simple trick to identify invalid lambda constructs.
When you write a lambda expression for a functional interface,
you are essentially providing an implementation of the method declared in that interface but in a very concise manner.  

Therefore, the lambda expression code that you write must contain all the pieces of the regular method code
except the ones that the compiler can easily figure out on its own such as the parameter types, return keyword,
and brackets. So, in a lambda expression, just check that all the information is there and that the expression
follows the basic syntax

-  (parameter list) OR single_variable_without_type -> { regular lines of code } OR just_an_expression_without_semicolon

For a complete discussion on this topic please see this short tutorial - http://enthuware.com/index.php/home/115